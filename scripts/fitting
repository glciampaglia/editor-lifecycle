#!/usr/bin/python
# coding: utf-8
# :vim:ft=python

''' fits data to a parametric model '''

# Copyright (C) 2011 GIOVANNI LUCA CIAMPAGLIA, GCIAMPAGLIA@WIKIMEDIA.ORG
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
# http://www.gnu.org/copyleft/gpl.html

__author__ = "Giovanni Luca Ciampaglia"
__email__ = "gciampaglia@wikimedia.org"

import sys
import os
import numpy as np
from matplotlib.font_manager import FontProperties
import matplotlib.pyplot as pp
from argparse import ArgumentParser
from scipy.optimize import curve_fit

from lifecycle.models import Expon, PowerLaw, StretchedExpon
import lifecycle.scale

__prog__ = os.path.basename(os.path.abspath(__file__))

_maxfev = 10000

parser = ArgumentParser(description=__doc__)
parser.add_argument(
        'path', 
        metavar='FILE',
        help='input text data file')
parser.add_argument(
        '-C',
        '--directory',
        help='output directory',
        dest='output_dir',
        default=os.curdir,
        metavar='DIR')
parser.add_argument(
        '-f',
        '--force', 
        action='store_true', 
        dest='force_overwrite',
        help='force overwrite')
parser.add_argument(
        '-b',
        '--batch', 
        action='store_true', 
        help='do not show graphics')

model_group = parser.add_mutually_exclusive_group(required=1)
model_group.add_argument(
        '-me',
        '--expon', 
        action='store_const',
        const=Expon, 
        help='exponential model',
        dest='modelclass')
model_group.add_argument(
        '-ms',
        '--stretched', 
        action='store_const',
        const=StretchedExpon, 
        help='stretched exponential model',
        dest='modelclass')
model_group.add_argument(
        '-mp',
        '--power-law', 
        action='store_const',
        const=PowerLaw, 
        help='power-law model',
        dest='modelclass')

group = parser.add_mutually_exclusive_group()
group.add_argument(
        '-ll', 
        '--loglog', 
        action='store_true', 
        help='display log-power axis')
group.add_argument(
        '-lp',
        '--logpow',
        help='display log-log axis',
        action='store_true')

def fit(path, modelclass):
    '''
    fits a `lifecycle.models.ParametricModel`

    Parameters
    ----------
    path - a path to a text file with data (x, y, ye)
    modelclass - a subclass of `lifecycle.models.ParametricModel`. 
        See docstring of `lifecycle.models` for a list of available models

    Returns
    -------
    x, y, ye - data loaded from `path`
    model - a fitted model of class `modelclass`
    '''
    x, y, ye = np.loadtxt(path, unpack=True)
    model = modelclass()
    pest, pcov = model.fit(x, y, ye=ye, maxfev=_maxfev)
    if not np.isscalar(pcov):
        perr = np.sqrt(np.diag(pcov)) / 2.
        model.setparams(*zip(pest, perr))
    else:
        model.setparams(*pest)
    gof, resid, Rsquared = model.gof(x, y, ye)
    model.goftest = gof
    model.residtest = resid
    model.Rsquared = Rsquared
    print model.summary(dataset=path, observations=len(x))
    return x, y, ye, model

# plotfit, data
_kwargs1 = { 
        'color' : 'black',
        'marker' : 'o',
        'ecolor' : 'none',
        'ls' : 'none',
        'ms' : 2,
}

# plotfit, fitted curve
_kwargs2 = { 
        'color' : 'darkgray',
        'lw' : 2,
        'ls' : '-',
}

# plotresid
_kwargs3 = {
        'marker' : 'o',
        'color' : 'black',
        'ls' : 'none',
        'lw' : 2,
        'ms' : 4,
}

def main(ns):
    # test output dir exists
    if not os.path.isdir(ns.output_dir):
        print >> sys.stderr, '%s: error: not an existing directory: %s' %\
                (__prog__, ns.output_dir)
        sys.exit(1)

    # test input file exists
    if not os.path.exists(ns.path):
        print >> sys.stderr, '%s: error: not such file: %s' % (__prog__,
                ns.path)
        sys.exit(1)
    title, _ = os.path.splitext(os.path.basename(ns.path))

    # test path to fit plot file does not exists (unless --force was passed)
    plot_path = os.path.join(ns.output_dir, title + '.pdf')
    if os.path.exists(plot_path) and not ns.force_overwrite:
        print >> sys.stderr, '%s: error: file exists (pass --force): %s' %\
                (__prog__, plot_path)
        sys.exit(1)

    # test path to residuals plot file does not exists (unless --force was
    # passed)
    resid_plot_path = os.path.join(ns.output_dir, 'resid_' + title + '.pdf')
    if os.path.exists(resid_plot_path) and not ns.force_overwrite:
        print >> sys.stderr, '%s: error: file exists (pass --force): %s' %\
                (__prog__, resid_plot_path)
        sys.exit(1)

    # fit the model
    x, y, ye, model = fit(ns.path, ns.modelclass)

    # plot fitted curve and data
    pp.figure()
    xx = np.linspace(x.min(), x.max(), endpoint=True, num=len(x) * 3 - 1)
    yy = model(xx)
    pp.plot(xx, yy, label=str(model), **_kwargs2)
    pp.errorbar(x, y, ye, **_kwargs1)
    pp.legend(loc='best',prop=FontProperties(size='x-small'))

    # set axes scale
    if ns.loglog:
        pp.xscale('log')
        pp.yscale('log')
    elif ns.logpow:
        pp.xscale('power', exponent=model.beta)
        pp.yscale('log')

    # title, axis labels
    pp.title(title.replace('_','\\_'))
    pp.xlabel('Days since registration')
    pp.ylabel('Edits/day')
    pp.draw()
    pp.savefig(plot_path)
    print '%s: fit plot saved to %s' % (__prog__, plot_path)

    # plot residuals
    pp.figure()
    r = model(x) - y
    pp.axhline(y=0, c='k')
    pp.plot(x, r, hold=1, **_kwargs3)

    # title, axis labels
    pp.title(title.replace('_','\\_'))
    pp.ylabel('Residuals')
    pp.xlabel('Days since registration')
    pp.draw()
    pp.savefig(resid_plot_path)
    print '%s: residuals plot saved to %s' % (__prog__, resid_plot_path)

    if not ns.batch:
        pp.show()

if __name__ == '__main__':
    # parse arguments from command line
    ns = parser.parse_args()
    main(ns)
