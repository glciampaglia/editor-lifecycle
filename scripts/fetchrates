#!/usr/bin/python

''' Fetches edit count data from database '''

# Copyright (C) 2011 GIOVANNI LUCA CIAMPAGLIA, GCIAMPAGLIA@WIKIMEDIA.ORG
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
# http://www.gnu.org/copyleft/gpl.html

__author__ = "Giovanni Luca Ciampaglia"
__email__ = "gciampaglia@wikimedia.org"

import sys
import os
import numpy as np

from zipfile import ZipFile
from contextlib import closing
from tempfile import mkdtemp
from oursql import connect, InterfaceError
from argparse import ArgumentParser
from datetime import datetime

from lifecycle.rates import userrate

parser = ArgumentParser(description=__doc__)
parser.add_argument(
            'input_path', 
            metavar='FILE',
            help='cohort file (with user ids on a single line)')
parser.add_argument(
            '-config', 
            dest='config_file', 
            metavar='FILE', 
            default='~/.my.cnf',
            help='mysql config file (default: %(default)s)')
parser.add_argument(
            '-outdir', 
            dest='output_dir', 
            help='output directory',
            metavar='DIR',
            default=os.curdir)

_query = """
SELECT UNIX_TIMESTAMP(rev_timestamp)/86400.0, page_namespace
FROM revision r 
JOIN page p
ON r.rev_page = p.page_id
WHERE rev_user = ?
ORDER BY rev_timestamp
"""

__prog__ = os.path.basename(os.path.abspath(__file__))

def main(ns):
    # test configuration file for mysql client exists
    cnf = os.path.expanduser(os.path.expandvars(ns.config_file))
    if not os.path.exists(cnf):
        print >> sys.stderr, '%s: error: no config file found: %s' % (__prog__, cnf)
        sys.exit(1)

    # test output path exists and is a directory
    if not os.path.isdir(ns.output_dir):
        print >> sys.stderr, '%s: error: not an existing directory: %s' % (__prog__, 
                ns.output_dir)
        sys.exit(1)

    # read user ids from cohort file, create zip archive and temp dir
    with closing(open(ns.input_path)) as f:
        line = f.readline().strip()
        if line:
            user_ids = map(int, line.split('\t'))
        else:
            print >> sys.stderr, '%s: error: empty cohort file: %s' % ns.input_path
            sys.exit(1)

    # connect to DB
    try:
        conn = connect(read_default_file=ns.config_file)
    except InterfaceError, e:
        print >> sys.stderr, '%s: error: %s' % (__prog__, e.args[1])
        sys.exit(1)

    # create output archive and temp working dir
    zip_path = os.path.splitext(os.path.basename(ns.input_path))[0] + '.npz'
    zip_path = os.path.join(ns.output_dir, zip_path)
    temp_dir = mkdtemp()

    with closing(ZipFile(zip_path, 'w')) as zf:

        # compute user rates and write them into the zip file
        with conn.cursor() as cursor:
            for uid in user_ids:
                cursor.execute(_query, (uid,))
                rows = list(cursor)
                if len(rows) == 0:
                    continue
                data = userrate(rows)
                path = os.path.join(temp_dir, '%d.npy' % uid)
                np.save(temp_dir, data)
                zf.write(path, os.path.basename(path))
                os.remove(path)

    # remove temp dir
    os.removedirs(temp_dir)

    # tell user
    print '%s: output saved to %s' % (datetime.now(), zip_path)

if __name__ == '__main__':
    # parse arguments from command line
    ns = parser.parse_args()
    main(ns)

