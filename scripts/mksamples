#!/usr/bin/python
#:vim:ft=python
# encoding:utf-8

''' groups user counts by day since registration '''

import os
from argparse import ArgumentParser
import numpy as np
from scipy.sparse import coo_matrix
from collections import deque
from contextlib import closing

parser = ArgumentParser(description=__doc__)
parser.add_argument('input_paths', metavar='file', nargs='+')
parser.add_argument('-p', '--prefix', dest='output_prefix', default='',
        metavar='PREFIX')

def main(args):
    for path in args.input_paths:
        output_path = args.output_prefix + os.path.basename(path)
        output_path = os.path.splitext(output_path)[0] + '.tsv'
        day_counts = {}
        archive = np.load(path)
        N = len(archive.files)
        print '%d users in %s' % (N, path)
        with closing(open(output_path, 'w')) as out_file:
            for uid in archive.files:
                data = archive[uid].view(np.recarray)
                idx = data.ns >= 0
                data = data[idx]
                counts = coo_matrix((data.edits, (data.day - data.day.min(),
                    data.ns))).tocsr().sum(axis=1)
                for day in xrange(counts.shape[0]):
                    n = int(counts[day])
                    try:
                        day_counts[day].append(n)
                    except KeyError:
                        day_counts[day] = deque([n])
            max_day = max(day_counts.keys())
            for day in xrange(max_day):
                print >> out_file, ' '.join(map(str, day_counts.get(day, [])))
        print '%s saved.' % output_path

if __name__ == '__main__':
    args = parser.parse_args()
    main(args)
